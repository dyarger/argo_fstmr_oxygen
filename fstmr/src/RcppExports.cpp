// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// splineMatrixC
Rcpp::NumericMatrix splineMatrixC(const int order, const Rcpp::NumericVector x, const Rcpp::NumericVector knots);
RcppExport SEXP _fstmr_splineMatrixC(SEXP orderSEXP, SEXP xSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(splineMatrixC(order, x, knots));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_UTU
Eigen::SparseMatrix<double, Eigen::ColMajor> c_compute_UTU(const Rcpp::List phi_x_phi_r, const Rcpp::List phi_x_phi_p, const Rcpp::List Omegas_r1, const Rcpp::List Omegas_r2, const Rcpp::List Omegas_p, const double me_r, const Eigen::Map<Eigen::VectorXd> me_p, const Eigen::Map<Eigen::VectorXi> n_basis_p, const Eigen::Map<Eigen::VectorXi> clust_mem, const int n_samples, const int n_samples_TS, const int G, const Eigen::Map<Eigen::VectorXi> BGC);
RcppExport SEXP _fstmr_c_compute_UTU(SEXP phi_x_phi_rSEXP, SEXP phi_x_phi_pSEXP, SEXP Omegas_r1SEXP, SEXP Omegas_r2SEXP, SEXP Omegas_pSEXP, SEXP me_rSEXP, SEXP me_pSEXP, SEXP n_basis_pSEXP, SEXP clust_memSEXP, SEXP n_samplesSEXP, SEXP n_samples_TSSEXP, SEXP GSEXP, SEXP BGCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type phi_x_phi_r(phi_x_phi_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type phi_x_phi_p(phi_x_phi_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r1(Omegas_r1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r2(Omegas_r2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_p(Omegas_pSEXP);
    Rcpp::traits::input_parameter< const double >::type me_r(me_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type me_p(me_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type n_basis_p(n_basis_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_samples_TS(n_samples_TSSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type BGC(BGCSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_UTU(phi_x_phi_r, phi_x_phi_p, Omegas_r1, Omegas_r2, Omegas_p, me_r, me_p, n_basis_p, clust_mem, n_samples, n_samples_TS, G, BGC));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_UTX
Eigen::VectorXd c_compute_UTX(const Rcpp::List basis_evals_r, const Rcpp::List basis_evals_p, const Rcpp::List profs_r, const Rcpp::List profs_p, const Rcpp::List Omegas_r1, const Rcpp::List Omegas_r2, const Rcpp::List Omegas_p, const Eigen::Map<Eigen::MatrixXd> means_r, const Eigen::Map<Eigen::MatrixXd> means_p, const Eigen::Map<Eigen::VectorXi> clust_mem, const double me_r, const Eigen::Map<Eigen::VectorXd> me_p, const Eigen::Map<Eigen::VectorXi> n_basis_p, const Eigen::Map<Eigen::VectorXi> BGC);
RcppExport SEXP _fstmr_c_compute_UTX(SEXP basis_evals_rSEXP, SEXP basis_evals_pSEXP, SEXP profs_rSEXP, SEXP profs_pSEXP, SEXP Omegas_r1SEXP, SEXP Omegas_r2SEXP, SEXP Omegas_pSEXP, SEXP means_rSEXP, SEXP means_pSEXP, SEXP clust_memSEXP, SEXP me_rSEXP, SEXP me_pSEXP, SEXP n_basis_pSEXP, SEXP BGCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_r(basis_evals_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_p(basis_evals_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_r(profs_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_p(profs_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r1(Omegas_r1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r2(Omegas_r2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_p(Omegas_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_r(means_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_p(means_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const double >::type me_r(me_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type me_p(me_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type n_basis_p(n_basis_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type BGC(BGCSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_UTX(basis_evals_r, basis_evals_p, profs_r, profs_p, Omegas_r1, Omegas_r2, Omegas_p, means_r, means_p, clust_mem, me_r, me_p, n_basis_p, BGC));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_centered_obs
double c_compute_centered_obs(const Rcpp::List basis_evals_r, const Rcpp::List basis_evals_p, const Rcpp::List profs_r, const Rcpp::List profs_p, const Eigen::Map<Eigen::MatrixXd> means_r, const Eigen::Map<Eigen::MatrixXd> means_p, const Eigen::Map<Eigen::VectorXi> clust_mem, const Eigen::Map<Eigen::VectorXi> n_basis_p, const Eigen::Map<Eigen::VectorXi> BGC);
RcppExport SEXP _fstmr_c_compute_centered_obs(SEXP basis_evals_rSEXP, SEXP basis_evals_pSEXP, SEXP profs_rSEXP, SEXP profs_pSEXP, SEXP means_rSEXP, SEXP means_pSEXP, SEXP clust_memSEXP, SEXP n_basis_pSEXP, SEXP BGCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_r(basis_evals_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_p(basis_evals_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_r(profs_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_p(profs_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_r(means_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_p(means_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type n_basis_p(n_basis_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type BGC(BGCSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_centered_obs(basis_evals_r, basis_evals_p, profs_r, profs_p, means_r, means_p, clust_mem, n_basis_p, BGC));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_UTU_single
Eigen::SparseMatrix<double, Eigen::ColMajor> c_compute_UTU_single(const Rcpp::List phi_x_phi, const Rcpp::List Omegas, const double me, const Eigen::Map<Eigen::VectorXi> clust_mem, const int n_samples, const int G);
RcppExport SEXP _fstmr_c_compute_UTU_single(SEXP phi_x_phiSEXP, SEXP OmegasSEXP, SEXP meSEXP, SEXP clust_memSEXP, SEXP n_samplesSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type phi_x_phi(phi_x_phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const double >::type me(meSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_UTU_single(phi_x_phi, Omegas, me, clust_mem, n_samples, G));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_UTX_single
Eigen::VectorXd c_compute_UTX_single(const Rcpp::List basis_evals, const Rcpp::List profs, const Rcpp::List Omegas, const Eigen::Map<Eigen::MatrixXd> means, const Eigen::Map<Eigen::VectorXi> clust_mem, const double me);
RcppExport SEXP _fstmr_c_compute_UTX_single(SEXP basis_evalsSEXP, SEXP profsSEXP, SEXP OmegasSEXP, SEXP meansSEXP, SEXP clust_memSEXP, SEXP meSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs(profsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const double >::type me(meSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_UTX_single(basis_evals, profs, Omegas, means, clust_mem, me));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_centered_obs_single
double c_compute_centered_obs_single(const Rcpp::List basis_evals, const Rcpp::List profs, const Eigen::Map<Eigen::VectorXi> clust_mem, const Eigen::Map<Eigen::MatrixXd> means, const double me);
RcppExport SEXP _fstmr_c_compute_centered_obs_single(SEXP basis_evalsSEXP, SEXP profsSEXP, SEXP clust_memSEXP, SEXP meansSEXP, SEXP meSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs(profsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const double >::type me(meSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_centered_obs_single(basis_evals, profs, clust_mem, means, me));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_E_step_likelihoods
Eigen::MatrixXd c_compute_E_step_likelihoods(const Rcpp::List profs_resp, const Rcpp::List profs_pred, const Eigen::Map<Eigen::VectorXi> is_bgc, const int n_profiles, const Rcpp::List basis_evals_r, const Rcpp::List basis_evals_p, const Rcpp::List Omegas_r1, const Rcpp::List Omegas_r2, const Rcpp::List Omegas_p, const Eigen::Map<Eigen::MatrixXd> means_resp, const Eigen::Map<Eigen::MatrixXd> means_pred, const Eigen::Map<Eigen::VectorXd> variances, const Eigen::Map<Eigen::MatrixXd> vars_r, const Eigen::Map<Eigen::MatrixXd> vars_p, const Eigen::Map<Eigen::MatrixXi> profile_lengths_p, const int G, const int n_preds);
RcppExport SEXP _fstmr_c_compute_E_step_likelihoods(SEXP profs_respSEXP, SEXP profs_predSEXP, SEXP is_bgcSEXP, SEXP n_profilesSEXP, SEXP basis_evals_rSEXP, SEXP basis_evals_pSEXP, SEXP Omegas_r1SEXP, SEXP Omegas_r2SEXP, SEXP Omegas_pSEXP, SEXP means_respSEXP, SEXP means_predSEXP, SEXP variancesSEXP, SEXP vars_rSEXP, SEXP vars_pSEXP, SEXP profile_lengths_pSEXP, SEXP GSEXP, SEXP n_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_resp(profs_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_pred(profs_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type is_bgc(is_bgcSEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_r(basis_evals_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_p(basis_evals_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r1(Omegas_r1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r2(Omegas_r2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_p(Omegas_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_resp(means_respSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_pred(means_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type variances(variancesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_r(vars_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_p(vars_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type profile_lengths_p(profile_lengths_pSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type n_preds(n_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_E_step_likelihoods(profs_resp, profs_pred, is_bgc, n_profiles, basis_evals_r, basis_evals_p, Omegas_r1, Omegas_r2, Omegas_p, means_resp, means_pred, variances, vars_r, vars_p, profile_lengths_p, G, n_preds));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_E_step_likelihoods_ind
Eigen::MatrixXd c_compute_E_step_likelihoods_ind(const Rcpp::List profs_resp, const Rcpp::List profs_pred, const Eigen::Map<Eigen::VectorXi> is_bgc, const int n_profiles, const Rcpp::List basis_evals_resp, const Rcpp::List basis_evals_pred, Rcpp::List Gammas, const Rcpp::List Omegas_resp, const Rcpp::List Omegas_preds, const Eigen::Map<Eigen::MatrixXd> means_resp, const Eigen::Map<Eigen::MatrixXd> means_pred, const Eigen::Map<Eigen::VectorXd> variances, const Eigen::Map<Eigen::MatrixXd> vars_pred, const Eigen::Map<Eigen::MatrixXi> profile_lengths_p, const int G, const int n_preds);
RcppExport SEXP _fstmr_c_compute_E_step_likelihoods_ind(SEXP profs_respSEXP, SEXP profs_predSEXP, SEXP is_bgcSEXP, SEXP n_profilesSEXP, SEXP basis_evals_respSEXP, SEXP basis_evals_predSEXP, SEXP GammasSEXP, SEXP Omegas_respSEXP, SEXP Omegas_predsSEXP, SEXP means_respSEXP, SEXP means_predSEXP, SEXP variancesSEXP, SEXP vars_predSEXP, SEXP profile_lengths_pSEXP, SEXP GSEXP, SEXP n_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_resp(profs_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_pred(profs_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type is_bgc(is_bgcSEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_resp(basis_evals_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_pred(basis_evals_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gammas(GammasSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_resp(Omegas_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_preds(Omegas_predsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_resp(means_respSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_pred(means_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type variances(variancesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_pred(vars_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type profile_lengths_p(profile_lengths_pSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type n_preds(n_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_E_step_likelihoods_ind(profs_resp, profs_pred, is_bgc, n_profiles, basis_evals_resp, basis_evals_pred, Gammas, Omegas_resp, Omegas_preds, means_resp, means_pred, variances, vars_pred, profile_lengths_p, G, n_preds));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_E_step_likelihoods_single
Eigen::MatrixXd c_compute_E_step_likelihoods_single(const Rcpp::List profs, const int n_profiles, const Rcpp::List basis_evals, const Rcpp::List Omegas, const Eigen::Map<Eigen::MatrixXd> means, const double me, const Eigen::Map<Eigen::MatrixXd> vars, const int G);
RcppExport SEXP _fstmr_c_compute_E_step_likelihoods_single(SEXP profsSEXP, SEXP n_profilesSEXP, SEXP basis_evalsSEXP, SEXP OmegasSEXP, SEXP meansSEXP, SEXP meSEXP, SEXP varsSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs(profsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const double >::type me(meSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars(varsSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_E_step_likelihoods_single(profs, n_profiles, basis_evals, Omegas, means, me, vars, G));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_U_matrix_sparse
Rcpp::List c_create_summed_U_matrix_sparse(const Rcpp::List phi_x_phi, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Eigen::Map<Eigen::VectorXd> weights, const int G, const int reps);
RcppExport SEXP _fstmr_c_create_summed_U_matrix_sparse(SEXP phi_x_phiSEXP, SEXP clust_memSEXP, SEXP weightsSEXP, SEXP GSEXP, SEXP repsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type phi_x_phi(phi_x_phiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_U_matrix_sparse(phi_x_phi, clust_mem, weights, G, reps));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_sparse
Eigen::MatrixXd c_create_summed_V_matrix_sparse(const Rcpp::List basis_evals, const Rcpp::List profiles, const int G, const Rcpp::List Omegas1, const Rcpp::List Omegas2, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List pcs1, const Rcpp::List pcs2, const int reps, const Eigen::Map<Eigen::VectorXd> weights);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_sparse(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP GSEXP, SEXP Omegas1SEXP, SEXP Omegas2SEXP, SEXP clust_memSEXP, SEXP pcs1SEXP, SEXP pcs2SEXP, SEXP repsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas1(Omegas1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas2(Omegas2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs1(pcs1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs2(pcs2SEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_sparse(basis_evals, profiles, G, Omegas1, Omegas2, clust_mem, pcs1, pcs2, reps, weights));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_sparse_single
Eigen::MatrixXd c_create_summed_V_matrix_sparse_single(const Rcpp::List basis_evals, const Rcpp::List profiles, const int G, const Rcpp::List Omegas, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List pcs, const int reps, const Eigen::Map<Eigen::VectorXd> weights);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_sparse_single(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP GSEXP, SEXP OmegasSEXP, SEXP clust_memSEXP, SEXP pcsSEXP, SEXP repsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs(pcsSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_sparse_single(basis_evals, profiles, G, Omegas, clust_mem, pcs, reps, weights));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_pcs_sparse
Eigen::MatrixXd c_create_summed_V_matrix_pcs_sparse(const Rcpp::List basis_evals, const Rcpp::List profiles, const Eigen::Map<Eigen::MatrixXd> means, const int G, const Rcpp::List Omegas1, const Rcpp::List Omegas2, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List pcs1, const Rcpp::List pcs2, const int reps, const Eigen::Map<Eigen::VectorXd> weights, const int q);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_pcs_sparse(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP meansSEXP, SEXP GSEXP, SEXP Omegas1SEXP, SEXP Omegas2SEXP, SEXP clust_memSEXP, SEXP pcs1SEXP, SEXP pcs2SEXP, SEXP repsSEXP, SEXP weightsSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas1(Omegas1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas2(Omegas2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs1(pcs1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs2(pcs2SEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_pcs_sparse(basis_evals, profiles, means, G, Omegas1, Omegas2, clust_mem, pcs1, pcs2, reps, weights, q));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_pcs_sparse_single
Eigen::MatrixXd c_create_summed_V_matrix_pcs_sparse_single(const Rcpp::List basis_evals, const Rcpp::List profiles, const Eigen::Map<Eigen::MatrixXd> means, const int G, const Rcpp::List Omegas, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List pcs, const int reps, const Eigen::Map<Eigen::VectorXd> weights, const int q);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_pcs_sparse_single(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP meansSEXP, SEXP GSEXP, SEXP OmegasSEXP, SEXP clust_memSEXP, SEXP pcsSEXP, SEXP repsSEXP, SEXP weightsSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs(pcsSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_pcs_sparse_single(basis_evals, profiles, means, G, Omegas, clust_mem, pcs, reps, weights, q));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_U_matrix_pcs_sparse
Rcpp::List c_create_summed_U_matrix_pcs_sparse(const Rcpp::List phi_x_phi, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Eigen::Map<Eigen::VectorXd> weights, const Eigen::Map<Eigen::MatrixXd> pc_weights, const int G, const int reps);
RcppExport SEXP _fstmr_c_create_summed_U_matrix_pcs_sparse(SEXP phi_x_phiSEXP, SEXP clust_memSEXP, SEXP weightsSEXP, SEXP pc_weightsSEXP, SEXP GSEXP, SEXP repsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type phi_x_phi(phi_x_phiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type pc_weights(pc_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_U_matrix_pcs_sparse(phi_x_phi, clust_mem, weights, pc_weights, G, reps));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_gamma_sparse_r
Eigen::MatrixXd c_create_summed_V_matrix_gamma_sparse_r(const Rcpp::List basis_evals, const Rcpp::List profiles, const Eigen::Map<Eigen::MatrixXd> means, const int G, const Rcpp::List Omegas1, const Rcpp::List Omegas2, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List etas, const Rcpp::List alphas, const int reps, const Eigen::Map<Eigen::VectorXd> weights, const int q);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_gamma_sparse_r(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP meansSEXP, SEXP GSEXP, SEXP Omegas1SEXP, SEXP Omegas2SEXP, SEXP clust_memSEXP, SEXP etasSEXP, SEXP alphasSEXP, SEXP repsSEXP, SEXP weightsSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas1(Omegas1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas2(Omegas2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_gamma_sparse_r(basis_evals, profiles, means, G, Omegas1, Omegas2, clust_mem, etas, alphas, reps, weights, q));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_U_matrix_gamma_sparse
Rcpp::List c_create_summed_U_matrix_gamma_sparse(const Rcpp::List phi_x_phi, const Rcpp::List Omegas1, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Eigen::Map<Eigen::VectorXd> weights, const Eigen::Map<Eigen::MatrixXd> pc_weights, const int G, const int reps);
RcppExport SEXP _fstmr_c_create_summed_U_matrix_gamma_sparse(SEXP phi_x_phiSEXP, SEXP Omegas1SEXP, SEXP clust_memSEXP, SEXP weightsSEXP, SEXP pc_weightsSEXP, SEXP GSEXP, SEXP repsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type phi_x_phi(phi_x_phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas1(Omegas1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type pc_weights(pc_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_U_matrix_gamma_sparse(phi_x_phi, Omegas1, clust_mem, weights, pc_weights, G, reps));
    return rcpp_result_gen;
END_RCPP
}
// c_update_measurement_error
double c_update_measurement_error(const Eigen::Map<Eigen::MatrixXi> cluster_mat, const Rcpp::List basis_evals, const Rcpp::List pcs1, const Rcpp::List pcs2, const Rcpp::List profiles, const Eigen::Map<Eigen::MatrixXd> means_mat, const Rcpp::List Omegas1, const Rcpp::List Omegas2, const int n_profiles, const Eigen::Map<Eigen::VectorXd> weights, const int G);
RcppExport SEXP _fstmr_c_update_measurement_error(SEXP cluster_matSEXP, SEXP basis_evalsSEXP, SEXP pcs1SEXP, SEXP pcs2SEXP, SEXP profilesSEXP, SEXP means_matSEXP, SEXP Omegas1SEXP, SEXP Omegas2SEXP, SEXP n_profilesSEXP, SEXP weightsSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type cluster_mat(cluster_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs1(pcs1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs2(pcs2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_mat(means_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas1(Omegas1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas2(Omegas2SEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(c_update_measurement_error(cluster_mat, basis_evals, pcs1, pcs2, profiles, means_mat, Omegas1, Omegas2, n_profiles, weights, G));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_squared_sparse
Eigen::VectorXd c_compute_squared_sparse(const Eigen::Map<Eigen::VectorXi> cluster_mat_i, const Eigen::Map<Eigen::MatrixXd> pcs_mat, const Eigen::Map<Eigen::VectorXd> profile, const int G, const Eigen::MappedSparseMatrix<double> basis_eval, const Eigen::Map<Eigen::MatrixXd> means_mat, const Rcpp::List Omegas, const Eigen::Map<Eigen::VectorXd> weights);
RcppExport SEXP _fstmr_c_compute_squared_sparse(SEXP cluster_mat_iSEXP, SEXP pcs_matSEXP, SEXP profileSEXP, SEXP GSEXP, SEXP basis_evalSEXP, SEXP means_matSEXP, SEXP OmegasSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type cluster_mat_i(cluster_mat_iSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type pcs_mat(pcs_matSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type basis_eval(basis_evalSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_mat(means_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_squared_sparse(cluster_mat_i, pcs_mat, profile, G, basis_eval, means_mat, Omegas, weights));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_squared_sparse_response
Eigen::VectorXd c_compute_squared_sparse_response(const Eigen::Map<Eigen::VectorXi> cluster_mat_i, const Eigen::Map<Eigen::MatrixXd> pcs_mat1, const Eigen::Map<Eigen::MatrixXd> pcs_mat2, const Eigen::Map<Eigen::VectorXd> profile, const int G, const Eigen::MappedSparseMatrix<double> basis_eval, const Eigen::Map<Eigen::MatrixXd> means_mat, const Rcpp::List Lambda1, const Rcpp::List Lambda2, const Eigen::Map<Eigen::VectorXd> weights);
RcppExport SEXP _fstmr_c_compute_squared_sparse_response(SEXP cluster_mat_iSEXP, SEXP pcs_mat1SEXP, SEXP pcs_mat2SEXP, SEXP profileSEXP, SEXP GSEXP, SEXP basis_evalSEXP, SEXP means_matSEXP, SEXP Lambda1SEXP, SEXP Lambda2SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type cluster_mat_i(cluster_mat_iSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type pcs_mat1(pcs_mat1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type pcs_mat2(pcs_mat2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type basis_eval(basis_evalSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_mat(means_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Lambda1(Lambda1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Lambda2(Lambda2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_squared_sparse_response(cluster_mat_i, pcs_mat1, pcs_mat2, profile, G, basis_eval, means_mat, Lambda1, Lambda2, weights));
    return rcpp_result_gen;
END_RCPP
}
// c_update_measurement_error_p_space
double c_update_measurement_error_p_space(const Eigen::Map<Eigen::MatrixXi> cluster_mat, const Rcpp::List basis_evals, const Rcpp::List pcs, const Rcpp::List profiles, const Eigen::Map<Eigen::MatrixXd> means_mat, const Rcpp::List Omegas, const int n_profiles, const int G);
RcppExport SEXP _fstmr_c_update_measurement_error_p_space(SEXP cluster_matSEXP, SEXP basis_evalsSEXP, SEXP pcsSEXP, SEXP profilesSEXP, SEXP means_matSEXP, SEXP OmegasSEXP, SEXP n_profilesSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type cluster_mat(cluster_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs(pcsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_mat(means_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(c_update_measurement_error_p_space(cluster_mat, basis_evals, pcs, profiles, means_mat, Omegas, n_profiles, G));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_conditional_distribution
void c_compute_conditional_distribution(Rcpp::List profs_resp, Rcpp::List profs_pred, Rcpp::List basis_evals_resp, Rcpp::List basis_evals_pred, Rcpp::List phi_x_phi_resp, Rcpp::List phi_x_phi_pred, const int n_samples, const Eigen::Map<Eigen::MatrixXd> means_resp, const Eigen::Map<Eigen::MatrixXd> means_pred, Rcpp::List Omegas_resp, Rcpp::List Omegas_pred, Rcpp::List Lambdas, Rcpp::List Sigma_eta_inv, const double me_resp, const Eigen::Map<Eigen::VectorXd> me_pred, const Eigen::Map<Eigen::MatrixXd> vars_resp, const Eigen::Map<Eigen::MatrixXd> vars_pred, const Eigen::Map<Eigen::VectorXi> basis_lengths_pred, const Eigen::Map<Eigen::MatrixXd> cond_probs, const Eigen::Map<Eigen::VectorXi> is_bgc, Rcpp::List conditional_distributions);
RcppExport SEXP _fstmr_c_compute_conditional_distribution(SEXP profs_respSEXP, SEXP profs_predSEXP, SEXP basis_evals_respSEXP, SEXP basis_evals_predSEXP, SEXP phi_x_phi_respSEXP, SEXP phi_x_phi_predSEXP, SEXP n_samplesSEXP, SEXP means_respSEXP, SEXP means_predSEXP, SEXP Omegas_respSEXP, SEXP Omegas_predSEXP, SEXP LambdasSEXP, SEXP Sigma_eta_invSEXP, SEXP me_respSEXP, SEXP me_predSEXP, SEXP vars_respSEXP, SEXP vars_predSEXP, SEXP basis_lengths_predSEXP, SEXP cond_probsSEXP, SEXP is_bgcSEXP, SEXP conditional_distributionsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type profs_resp(profs_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profs_pred(profs_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type basis_evals_resp(basis_evals_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type basis_evals_pred(basis_evals_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type phi_x_phi_resp(phi_x_phi_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type phi_x_phi_pred(phi_x_phi_predSEXP);
    Rcpp::traits::input_parameter< const int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_resp(means_respSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type means_pred(means_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Omegas_resp(Omegas_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Omegas_pred(Omegas_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Lambdas(LambdasSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma_eta_inv(Sigma_eta_invSEXP);
    Rcpp::traits::input_parameter< const double >::type me_resp(me_respSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type me_pred(me_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_resp(vars_respSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_pred(vars_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type basis_lengths_pred(basis_lengths_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type cond_probs(cond_probsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type is_bgc(is_bgcSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type conditional_distributions(conditional_distributionsSEXP);
    c_compute_conditional_distribution(profs_resp, profs_pred, basis_evals_resp, basis_evals_pred, phi_x_phi_resp, phi_x_phi_pred, n_samples, means_resp, means_pred, Omegas_resp, Omegas_pred, Lambdas, Sigma_eta_inv, me_resp, me_pred, vars_resp, vars_pred, basis_lengths_pred, cond_probs, is_bgc, conditional_distributions);
    return R_NilValue;
END_RCPP
}
// c_lik_eigen_sherman_pred
double c_lik_eigen_sherman_pred(const Eigen::VectorXd& x, const Eigen::VectorXd& mean, const Eigen::VectorXd& variances, const Eigen::Map<Eigen::MatrixXd>& U, const Eigen::VectorXd& W);
RcppExport SEXP _fstmr_c_lik_eigen_sherman_pred(SEXP xSEXP, SEXP meanSEXP, SEXP variancesSEXP, SEXP USEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type variances(variancesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(c_lik_eigen_sherman_pred(x, mean, variances, U, W));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort
Rcpp::NumericVector stl_sort(Rcpp::NumericVector x);
RcppExport SEXP _fstmr_stl_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// c_CG
Eigen::VectorXd c_CG(Eigen::MappedSparseMatrix<double> A, Eigen::VectorXd& w);
RcppExport SEXP _fstmr_c_CG(SEXP ASEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_CG(A, w));
    return rcpp_result_gen;
END_RCPP
}
// c_quad_form_log
double c_quad_form_log(Eigen::MappedSparseMatrix<double> A, Eigen::VectorXd& w, int maxiter, double tol, int stepsize, bool precondition);
RcppExport SEXP _fstmr_c_quad_form_log(SEXP ASEXP, SEXP wSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP stepsizeSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(c_quad_form_log(A, w, maxiter, tol, stepsize, precondition));
    return rcpp_result_gen;
END_RCPP
}
// c_reorder
Eigen::SparseMatrix<double> c_reorder(Eigen::MappedSparseMatrix<double> A, Eigen::VectorXi ind);
RcppExport SEXP _fstmr_c_reorder(SEXP ASEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(c_reorder(A, ind));
    return rcpp_result_gen;
END_RCPP
}
// c_sample_lanczos
Eigen::VectorXd c_sample_lanczos(Eigen::MappedSparseMatrix<double> A, Eigen::VectorXd w, int stepsize, int maxiter, double tol, bool precondition);
RcppExport SEXP _fstmr_c_sample_lanczos(SEXP ASEXP, SEXP wSEXP, SEXP stepsizeSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(c_sample_lanczos(A, w, stepsize, maxiter, tol, precondition));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_E_step_likelihoods_for_season
Eigen::MatrixXd c_compute_E_step_likelihoods_for_season(const Rcpp::List profs_resp, const Rcpp::List profs_pred, const Eigen::Map<Eigen::VectorXi> is_bgc, const int n_profiles, const Rcpp::List basis_evals_r, const Rcpp::List basis_evals_p, const Rcpp::List Omegas_r1, const Rcpp::List Omegas_r2, const Rcpp::List Omegas_p, const Rcpp::List means_resp, const Rcpp::List means_pred, const Eigen::Map<Eigen::VectorXd> variances, const Eigen::Map<Eigen::MatrixXd> vars_r, const Eigen::Map<Eigen::MatrixXd> vars_p, const Eigen::Map<Eigen::MatrixXi> profile_lengths_p, const int G, const int n_preds, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_compute_E_step_likelihoods_for_season(SEXP profs_respSEXP, SEXP profs_predSEXP, SEXP is_bgcSEXP, SEXP n_profilesSEXP, SEXP basis_evals_rSEXP, SEXP basis_evals_pSEXP, SEXP Omegas_r1SEXP, SEXP Omegas_r2SEXP, SEXP Omegas_pSEXP, SEXP means_respSEXP, SEXP means_predSEXP, SEXP variancesSEXP, SEXP vars_rSEXP, SEXP vars_pSEXP, SEXP profile_lengths_pSEXP, SEXP GSEXP, SEXP n_predsSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_resp(profs_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_pred(profs_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type is_bgc(is_bgcSEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_r(basis_evals_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_p(basis_evals_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r1(Omegas_r1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r2(Omegas_r2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_p(Omegas_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_resp(means_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_pred(means_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type variances(variancesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_r(vars_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_p(vars_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type profile_lengths_p(profile_lengths_pSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type n_preds(n_predsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_E_step_likelihoods_for_season(profs_resp, profs_pred, is_bgc, n_profiles, basis_evals_r, basis_evals_p, Omegas_r1, Omegas_r2, Omegas_p, means_resp, means_pred, variances, vars_r, vars_p, profile_lengths_p, G, n_preds, days));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_UTX_for_season
Eigen::VectorXd c_compute_UTX_for_season(const Rcpp::List basis_evals_r, const Rcpp::List basis_evals_p, const Rcpp::List profs_r, const Rcpp::List profs_p, const Rcpp::List Omegas_r1, const Rcpp::List Omegas_r2, const Rcpp::List Omegas_p, const Rcpp::List means_r, const Rcpp::List means_p, const Eigen::Map<Eigen::VectorXi> clust_mem, const double me_r, const Eigen::Map<Eigen::VectorXd> me_p, const Eigen::Map<Eigen::VectorXi> n_basis_p, const Eigen::Map<Eigen::VectorXi> BGC, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_compute_UTX_for_season(SEXP basis_evals_rSEXP, SEXP basis_evals_pSEXP, SEXP profs_rSEXP, SEXP profs_pSEXP, SEXP Omegas_r1SEXP, SEXP Omegas_r2SEXP, SEXP Omegas_pSEXP, SEXP means_rSEXP, SEXP means_pSEXP, SEXP clust_memSEXP, SEXP me_rSEXP, SEXP me_pSEXP, SEXP n_basis_pSEXP, SEXP BGCSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_r(basis_evals_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_p(basis_evals_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_r(profs_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_p(profs_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r1(Omegas_r1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_r2(Omegas_r2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_p(Omegas_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_r(means_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_p(means_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const double >::type me_r(me_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type me_p(me_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type n_basis_p(n_basis_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type BGC(BGCSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_UTX_for_season(basis_evals_r, basis_evals_p, profs_r, profs_p, Omegas_r1, Omegas_r2, Omegas_p, means_r, means_p, clust_mem, me_r, me_p, n_basis_p, BGC, days));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_centered_obs_for_season
double c_compute_centered_obs_for_season(const Rcpp::List basis_evals_r, const Rcpp::List basis_evals_p, const Rcpp::List profs_r, const Rcpp::List profs_p, const Rcpp::List means_r, const Rcpp::List means_p, const Eigen::Map<Eigen::VectorXi> clust_mem, const Eigen::Map<Eigen::VectorXi> n_basis_p, const Eigen::Map<Eigen::VectorXi> BGC, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_compute_centered_obs_for_season(SEXP basis_evals_rSEXP, SEXP basis_evals_pSEXP, SEXP profs_rSEXP, SEXP profs_pSEXP, SEXP means_rSEXP, SEXP means_pSEXP, SEXP clust_memSEXP, SEXP n_basis_pSEXP, SEXP BGCSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_r(basis_evals_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_p(basis_evals_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_r(profs_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_p(profs_pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_r(means_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_p(means_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type n_basis_p(n_basis_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type BGC(BGCSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_centered_obs_for_season(basis_evals_r, basis_evals_p, profs_r, profs_p, means_r, means_p, clust_mem, n_basis_p, BGC, days));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_U_matrix_pcs_sparse_for_season
Rcpp::List c_create_summed_U_matrix_pcs_sparse_for_season(const Rcpp::List phi_x_phi, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Eigen::Map<Eigen::VectorXd> weights, const Eigen::Map<Eigen::VectorXd> pc_weights, const Eigen::Map<Eigen::VectorXd> pc_weights2, const int G, const int reps);
RcppExport SEXP _fstmr_c_create_summed_U_matrix_pcs_sparse_for_season(SEXP phi_x_phiSEXP, SEXP clust_memSEXP, SEXP weightsSEXP, SEXP pc_weightsSEXP, SEXP pc_weights2SEXP, SEXP GSEXP, SEXP repsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type phi_x_phi(phi_x_phiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type pc_weights(pc_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type pc_weights2(pc_weights2SEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_U_matrix_pcs_sparse_for_season(phi_x_phi, clust_mem, weights, pc_weights, pc_weights2, G, reps));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_sparse_for_season
Eigen::MatrixXd c_create_summed_V_matrix_sparse_for_season(const Rcpp::List basis_evals, const Rcpp::List profiles, const int G, const Rcpp::List Omegas1, const Rcpp::List Omegas2, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List pcs1, const Rcpp::List pcs2, const Eigen::Map<Eigen::VectorXd> additional_weights, const int reps, const Eigen::Map<Eigen::VectorXd> weights);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_sparse_for_season(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP GSEXP, SEXP Omegas1SEXP, SEXP Omegas2SEXP, SEXP clust_memSEXP, SEXP pcs1SEXP, SEXP pcs2SEXP, SEXP additional_weightsSEXP, SEXP repsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas1(Omegas1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas2(Omegas2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs1(pcs1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs2(pcs2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type additional_weights(additional_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_sparse_for_season(basis_evals, profiles, G, Omegas1, Omegas2, clust_mem, pcs1, pcs2, additional_weights, reps, weights));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_sparse_single_for_season
Eigen::MatrixXd c_create_summed_V_matrix_sparse_single_for_season(const Rcpp::List basis_evals, const Rcpp::List profiles, const int G, const Rcpp::List Omegas, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List pcs, const Eigen::Map<Eigen::VectorXd> additional_weights, const int reps, const Eigen::Map<Eigen::VectorXd> weights);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_sparse_single_for_season(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP GSEXP, SEXP OmegasSEXP, SEXP clust_memSEXP, SEXP pcsSEXP, SEXP additional_weightsSEXP, SEXP repsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs(pcsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type additional_weights(additional_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_sparse_single_for_season(basis_evals, profiles, G, Omegas, clust_mem, pcs, additional_weights, reps, weights));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_pcs_sparse_single_for_season
Eigen::MatrixXd c_create_summed_V_matrix_pcs_sparse_single_for_season(const Rcpp::List basis_evals, const Rcpp::List profiles, const Rcpp::List means, const int G, const Rcpp::List Omegas, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List pcs, const int reps, const Eigen::Map<Eigen::VectorXd> weights, const int q, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_pcs_sparse_single_for_season(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP meansSEXP, SEXP GSEXP, SEXP OmegasSEXP, SEXP clust_memSEXP, SEXP pcsSEXP, SEXP repsSEXP, SEXP weightsSEXP, SEXP qSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs(pcsSEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_pcs_sparse_single_for_season(basis_evals, profiles, means, G, Omegas, clust_mem, pcs, reps, weights, q, days));
    return rcpp_result_gen;
END_RCPP
}
// c_create_summed_V_matrix_pcs_sparse_for_season
Eigen::MatrixXd c_create_summed_V_matrix_pcs_sparse_for_season(const Rcpp::List basis_evals, const Rcpp::List profiles, const Rcpp::List means, const int G, const Rcpp::List Omegas1, const Rcpp::List Omegas2, const Eigen::Map<Eigen::MatrixXi> clust_mem, const Rcpp::List pcs1, const Rcpp::List pcs2, const int reps, const Eigen::Map<Eigen::VectorXd> weights, const int q, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_create_summed_V_matrix_pcs_sparse_for_season(SEXP basis_evalsSEXP, SEXP profilesSEXP, SEXP meansSEXP, SEXP GSEXP, SEXP Omegas1SEXP, SEXP Omegas2SEXP, SEXP clust_memSEXP, SEXP pcs1SEXP, SEXP pcs2SEXP, SEXP repsSEXP, SEXP weightsSEXP, SEXP qSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas1(Omegas1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas2(Omegas2SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs1(pcs1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs2(pcs2SEXP);
    Rcpp::traits::input_parameter< const int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_create_summed_V_matrix_pcs_sparse_for_season(basis_evals, profiles, means, G, Omegas1, Omegas2, clust_mem, pcs1, pcs2, reps, weights, q, days));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_squared_sparse_for_season
Eigen::VectorXd c_compute_squared_sparse_for_season(const Eigen::Map<Eigen::VectorXi> cluster_mat_i, const Eigen::Map<Eigen::MatrixXd> pcs_mat, const Eigen::Map<Eigen::VectorXd> profile, const int G, const Eigen::MappedSparseMatrix<double> basis_eval, const Rcpp::List means_mat, const Rcpp::List Omegas, const Eigen::Map<Eigen::VectorXd> weights, const double day);
RcppExport SEXP _fstmr_c_compute_squared_sparse_for_season(SEXP cluster_mat_iSEXP, SEXP pcs_matSEXP, SEXP profileSEXP, SEXP GSEXP, SEXP basis_evalSEXP, SEXP means_matSEXP, SEXP OmegasSEXP, SEXP weightsSEXP, SEXP daySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type cluster_mat_i(cluster_mat_iSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type pcs_mat(pcs_matSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type profile(profileSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type basis_eval(basis_evalSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_mat(means_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type day(daySEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_squared_sparse_for_season(cluster_mat_i, pcs_mat, profile, G, basis_eval, means_mat, Omegas, weights, day));
    return rcpp_result_gen;
END_RCPP
}
// c_update_measurement_error_for_season
double c_update_measurement_error_for_season(const Eigen::Map<Eigen::MatrixXi> cluster_mat, const Rcpp::List basis_evals, const Rcpp::List pcs1, const Rcpp::List pcs2, const Rcpp::List profiles, const Rcpp::List means_mat, const Rcpp::List Omegas1, const Rcpp::List Omegas2, const int n_profiles, const Eigen::Map<Eigen::VectorXd> weights, const int G, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_update_measurement_error_for_season(SEXP cluster_matSEXP, SEXP basis_evalsSEXP, SEXP pcs1SEXP, SEXP pcs2SEXP, SEXP profilesSEXP, SEXP means_matSEXP, SEXP Omegas1SEXP, SEXP Omegas2SEXP, SEXP n_profilesSEXP, SEXP weightsSEXP, SEXP GSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type cluster_mat(cluster_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs1(pcs1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type pcs2(pcs2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profiles(profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_mat(means_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas1(Omegas1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas2(Omegas2SEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_update_measurement_error_for_season(cluster_mat, basis_evals, pcs1, pcs2, profiles, means_mat, Omegas1, Omegas2, n_profiles, weights, G, days));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_conditional_distribution_for_season
void c_compute_conditional_distribution_for_season(Rcpp::List profs_resp, Rcpp::List profs_pred, Rcpp::List basis_evals_resp, Rcpp::List basis_evals_pred, Rcpp::List phi_x_phi_resp, Rcpp::List phi_x_phi_pred, const int n_samples, Rcpp::List means_resp, Rcpp::List means_pred, Rcpp::List Omegas_resp, Rcpp::List Omegas_pred, Rcpp::List Lambdas, Rcpp::List Sigma_eta_inv, const double me_resp, const Eigen::Map<Eigen::VectorXd> me_pred, const Eigen::Map<Eigen::MatrixXd> vars_resp, const Eigen::Map<Eigen::MatrixXd> vars_pred, const Eigen::Map<Eigen::VectorXi> basis_lengths_pred, const Eigen::Map<Eigen::MatrixXd> cond_probs, const Eigen::Map<Eigen::VectorXi> is_bgc, const Eigen::Map<Eigen::VectorXd> days, Rcpp::List conditional_distributions);
RcppExport SEXP _fstmr_c_compute_conditional_distribution_for_season(SEXP profs_respSEXP, SEXP profs_predSEXP, SEXP basis_evals_respSEXP, SEXP basis_evals_predSEXP, SEXP phi_x_phi_respSEXP, SEXP phi_x_phi_predSEXP, SEXP n_samplesSEXP, SEXP means_respSEXP, SEXP means_predSEXP, SEXP Omegas_respSEXP, SEXP Omegas_predSEXP, SEXP LambdasSEXP, SEXP Sigma_eta_invSEXP, SEXP me_respSEXP, SEXP me_predSEXP, SEXP vars_respSEXP, SEXP vars_predSEXP, SEXP basis_lengths_predSEXP, SEXP cond_probsSEXP, SEXP is_bgcSEXP, SEXP daysSEXP, SEXP conditional_distributionsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type profs_resp(profs_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type profs_pred(profs_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type basis_evals_resp(basis_evals_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type basis_evals_pred(basis_evals_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type phi_x_phi_resp(phi_x_phi_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type phi_x_phi_pred(phi_x_phi_predSEXP);
    Rcpp::traits::input_parameter< const int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type means_resp(means_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type means_pred(means_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Omegas_resp(Omegas_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Omegas_pred(Omegas_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Lambdas(LambdasSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma_eta_inv(Sigma_eta_invSEXP);
    Rcpp::traits::input_parameter< const double >::type me_resp(me_respSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type me_pred(me_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_resp(vars_respSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_pred(vars_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type basis_lengths_pred(basis_lengths_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type cond_probs(cond_probsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type is_bgc(is_bgcSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type conditional_distributions(conditional_distributionsSEXP);
    c_compute_conditional_distribution_for_season(profs_resp, profs_pred, basis_evals_resp, basis_evals_pred, phi_x_phi_resp, phi_x_phi_pred, n_samples, means_resp, means_pred, Omegas_resp, Omegas_pred, Lambdas, Sigma_eta_inv, me_resp, me_pred, vars_resp, vars_pred, basis_lengths_pred, cond_probs, is_bgc, days, conditional_distributions);
    return R_NilValue;
END_RCPP
}
// c_compute_E_step_likelihoods_ind_for_season
Eigen::MatrixXd c_compute_E_step_likelihoods_ind_for_season(const Rcpp::List profs_resp, const Rcpp::List profs_pred, const Eigen::Map<Eigen::VectorXi> is_bgc, const int n_profiles, const Rcpp::List basis_evals_resp, const Rcpp::List basis_evals_pred, Rcpp::List Gammas, const Rcpp::List Omegas_resp, const Rcpp::List Omegas_preds, const Rcpp::List means_resp, const Rcpp::List means_pred, const Eigen::Map<Eigen::VectorXd> variances, const Eigen::Map<Eigen::MatrixXd> vars_pred, const Eigen::Map<Eigen::MatrixXi> profile_lengths_p, const Eigen::Map<Eigen::VectorXd> days, const int G, const int n_preds);
RcppExport SEXP _fstmr_c_compute_E_step_likelihoods_ind_for_season(SEXP profs_respSEXP, SEXP profs_predSEXP, SEXP is_bgcSEXP, SEXP n_profilesSEXP, SEXP basis_evals_respSEXP, SEXP basis_evals_predSEXP, SEXP GammasSEXP, SEXP Omegas_respSEXP, SEXP Omegas_predsSEXP, SEXP means_respSEXP, SEXP means_predSEXP, SEXP variancesSEXP, SEXP vars_predSEXP, SEXP profile_lengths_pSEXP, SEXP daysSEXP, SEXP GSEXP, SEXP n_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_resp(profs_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs_pred(profs_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type is_bgc(is_bgcSEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_resp(basis_evals_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals_pred(basis_evals_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gammas(GammasSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_resp(Omegas_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas_preds(Omegas_predsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_resp(means_respSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means_pred(means_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type variances(variancesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars_pred(vars_predSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type profile_lengths_p(profile_lengths_pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type n_preds(n_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_E_step_likelihoods_ind_for_season(profs_resp, profs_pred, is_bgc, n_profiles, basis_evals_resp, basis_evals_pred, Gammas, Omegas_resp, Omegas_preds, means_resp, means_pred, variances, vars_pred, profile_lengths_p, days, G, n_preds));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_E_step_likelihoods_single_for_season
Eigen::MatrixXd c_compute_E_step_likelihoods_single_for_season(const Rcpp::List profs, const int n_profiles, const Rcpp::List basis_evals, const Rcpp::List Omegas, const Rcpp::List means, const double me, const Eigen::Map<Eigen::MatrixXd> vars, const int G, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_compute_E_step_likelihoods_single_for_season(SEXP profsSEXP, SEXP n_profilesSEXP, SEXP basis_evalsSEXP, SEXP OmegasSEXP, SEXP meansSEXP, SEXP meSEXP, SEXP varsSEXP, SEXP GSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs(profsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_profiles(n_profilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const double >::type me(meSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vars(varsSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_E_step_likelihoods_single_for_season(profs, n_profiles, basis_evals, Omegas, means, me, vars, G, days));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_UTX_single_for_season
Eigen::VectorXd c_compute_UTX_single_for_season(const Rcpp::List basis_evals, const Rcpp::List profs, const Rcpp::List Omegas, const Rcpp::List means, const Eigen::Map<Eigen::VectorXi> clust_mem, const double me, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_compute_UTX_single_for_season(SEXP basis_evalsSEXP, SEXP profsSEXP, SEXP OmegasSEXP, SEXP meansSEXP, SEXP clust_memSEXP, SEXP meSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs(profsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Omegas(OmegasSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const double >::type me(meSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_UTX_single_for_season(basis_evals, profs, Omegas, means, clust_mem, me, days));
    return rcpp_result_gen;
END_RCPP
}
// c_compute_centered_obs_single_for_season
double c_compute_centered_obs_single_for_season(const Rcpp::List basis_evals, const Rcpp::List profs, const Eigen::Map<Eigen::VectorXi> clust_mem, const Rcpp::List means, const double me, const int G, const Eigen::Map<Eigen::VectorXd> days);
RcppExport SEXP _fstmr_c_compute_centered_obs_single_for_season(SEXP basis_evalsSEXP, SEXP profsSEXP, SEXP clust_memSEXP, SEXP meansSEXP, SEXP meSEXP, SEXP GSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basis_evals(basis_evalsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type profs(profsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type clust_mem(clust_memSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const double >::type me(meSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(c_compute_centered_obs_single_for_season(basis_evals, profs, clust_mem, means, me, G, days));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fstmr_splineMatrixC", (DL_FUNC) &_fstmr_splineMatrixC, 3},
    {"_fstmr_c_compute_UTU", (DL_FUNC) &_fstmr_c_compute_UTU, 13},
    {"_fstmr_c_compute_UTX", (DL_FUNC) &_fstmr_c_compute_UTX, 14},
    {"_fstmr_c_compute_centered_obs", (DL_FUNC) &_fstmr_c_compute_centered_obs, 9},
    {"_fstmr_c_compute_UTU_single", (DL_FUNC) &_fstmr_c_compute_UTU_single, 6},
    {"_fstmr_c_compute_UTX_single", (DL_FUNC) &_fstmr_c_compute_UTX_single, 6},
    {"_fstmr_c_compute_centered_obs_single", (DL_FUNC) &_fstmr_c_compute_centered_obs_single, 5},
    {"_fstmr_c_compute_E_step_likelihoods", (DL_FUNC) &_fstmr_c_compute_E_step_likelihoods, 17},
    {"_fstmr_c_compute_E_step_likelihoods_ind", (DL_FUNC) &_fstmr_c_compute_E_step_likelihoods_ind, 16},
    {"_fstmr_c_compute_E_step_likelihoods_single", (DL_FUNC) &_fstmr_c_compute_E_step_likelihoods_single, 8},
    {"_fstmr_c_create_summed_U_matrix_sparse", (DL_FUNC) &_fstmr_c_create_summed_U_matrix_sparse, 5},
    {"_fstmr_c_create_summed_V_matrix_sparse", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_sparse, 10},
    {"_fstmr_c_create_summed_V_matrix_sparse_single", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_sparse_single, 8},
    {"_fstmr_c_create_summed_V_matrix_pcs_sparse", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_pcs_sparse, 12},
    {"_fstmr_c_create_summed_V_matrix_pcs_sparse_single", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_pcs_sparse_single, 10},
    {"_fstmr_c_create_summed_U_matrix_pcs_sparse", (DL_FUNC) &_fstmr_c_create_summed_U_matrix_pcs_sparse, 6},
    {"_fstmr_c_create_summed_V_matrix_gamma_sparse_r", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_gamma_sparse_r, 12},
    {"_fstmr_c_create_summed_U_matrix_gamma_sparse", (DL_FUNC) &_fstmr_c_create_summed_U_matrix_gamma_sparse, 7},
    {"_fstmr_c_update_measurement_error", (DL_FUNC) &_fstmr_c_update_measurement_error, 11},
    {"_fstmr_c_compute_squared_sparse", (DL_FUNC) &_fstmr_c_compute_squared_sparse, 8},
    {"_fstmr_c_compute_squared_sparse_response", (DL_FUNC) &_fstmr_c_compute_squared_sparse_response, 10},
    {"_fstmr_c_update_measurement_error_p_space", (DL_FUNC) &_fstmr_c_update_measurement_error_p_space, 8},
    {"_fstmr_c_compute_conditional_distribution", (DL_FUNC) &_fstmr_c_compute_conditional_distribution, 21},
    {"_fstmr_c_lik_eigen_sherman_pred", (DL_FUNC) &_fstmr_c_lik_eigen_sherman_pred, 5},
    {"_fstmr_stl_sort", (DL_FUNC) &_fstmr_stl_sort, 1},
    {"_fstmr_c_CG", (DL_FUNC) &_fstmr_c_CG, 2},
    {"_fstmr_c_quad_form_log", (DL_FUNC) &_fstmr_c_quad_form_log, 6},
    {"_fstmr_c_reorder", (DL_FUNC) &_fstmr_c_reorder, 2},
    {"_fstmr_c_sample_lanczos", (DL_FUNC) &_fstmr_c_sample_lanczos, 6},
    {"_fstmr_c_compute_E_step_likelihoods_for_season", (DL_FUNC) &_fstmr_c_compute_E_step_likelihoods_for_season, 18},
    {"_fstmr_c_compute_UTX_for_season", (DL_FUNC) &_fstmr_c_compute_UTX_for_season, 15},
    {"_fstmr_c_compute_centered_obs_for_season", (DL_FUNC) &_fstmr_c_compute_centered_obs_for_season, 10},
    {"_fstmr_c_create_summed_U_matrix_pcs_sparse_for_season", (DL_FUNC) &_fstmr_c_create_summed_U_matrix_pcs_sparse_for_season, 7},
    {"_fstmr_c_create_summed_V_matrix_sparse_for_season", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_sparse_for_season, 11},
    {"_fstmr_c_create_summed_V_matrix_sparse_single_for_season", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_sparse_single_for_season, 9},
    {"_fstmr_c_create_summed_V_matrix_pcs_sparse_single_for_season", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_pcs_sparse_single_for_season, 11},
    {"_fstmr_c_create_summed_V_matrix_pcs_sparse_for_season", (DL_FUNC) &_fstmr_c_create_summed_V_matrix_pcs_sparse_for_season, 13},
    {"_fstmr_c_compute_squared_sparse_for_season", (DL_FUNC) &_fstmr_c_compute_squared_sparse_for_season, 9},
    {"_fstmr_c_update_measurement_error_for_season", (DL_FUNC) &_fstmr_c_update_measurement_error_for_season, 12},
    {"_fstmr_c_compute_conditional_distribution_for_season", (DL_FUNC) &_fstmr_c_compute_conditional_distribution_for_season, 22},
    {"_fstmr_c_compute_E_step_likelihoods_ind_for_season", (DL_FUNC) &_fstmr_c_compute_E_step_likelihoods_ind_for_season, 17},
    {"_fstmr_c_compute_E_step_likelihoods_single_for_season", (DL_FUNC) &_fstmr_c_compute_E_step_likelihoods_single_for_season, 9},
    {"_fstmr_c_compute_UTX_single_for_season", (DL_FUNC) &_fstmr_c_compute_UTX_single_for_season, 7},
    {"_fstmr_c_compute_centered_obs_single_for_season", (DL_FUNC) &_fstmr_c_compute_centered_obs_single_for_season, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_fstmr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
